#include <WiFi.h>
#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_AHTX0.h>
#include <MPU6050.h>
#include <ESPAsyncWebServer.h>

// --- Configuració ---
#define DHTPIN 14   // Pin del sensor DHT22
#define DHTTYPE DHT22  // Tipus de sensor
#define VIBRATOR_PIN 27   // Pin del motor de vibració
#define BUTTON_PIN 12    // Pin del botó
#define SCREEN_WIDTH 128   // Llargada pantalla OLED
#define SCREEN_HEIGHT 32   // Amplada pantalla OLED
#define OLED_RESET -1

// --- Objectes ---
Adafruit_AHTX0 aht;   // Objecte AHT10   
MPU6050 mpu;          // Objetce Accelerometre
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);   // Objecte pantala
AsyncWebServer server(80);    // Servidor de la web

// --- Estat del sistema ---
bool systemActive = false;        // Inicialitza l'estat del sitema com apagat
unsigned long lastReminder = 0;   // Inicialitza el temps que ha passat des de l'últim recordatori a 0
unsigned long reminderInterval = 60000;     
String activityLevel = "Baix";    // Inicialitza el nivell d'activitat a baix tenit Alt mitja i baix
float temperature = 0.0;    // Declaració de la temperatura inicialitzada a 0.0
float humidity = 0.0;       // Declaració de la humitat inicialitzada a 0.0

// --- WiFi ---
const char* ssid = "NomDeLaXarxa";
const char* password = "Contrasenya";

// --- Forward declarations de funcions ---
void setupWebServer();
void updateSensors();
void updateActivityLevel();
void calculateReminderInterval();
void triggerReminder();
void updateDisplay();

// --- Setup ---
void setup() {
  Serial.begin(115200);
  pinMode(VIBRATOR_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);


 if (!aht.begin()) {
  Serial.println("No s'ha trobat el sensor AHT10!");
  while (1) delay(10);
}

  mpu.initialize();
  
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); Serial.print(".");
  }
  Serial.println("\nWiFi connectat: " + WiFi.localIP().toString());

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("Error OLED")); while (true);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);

  setupWebServer();
}

// --- Loop principal ---
void loop() {
  if (digitalRead(BUTTON_PIN) == LOW) {
    delay(300);
    systemActive = !systemActive;
    Serial.println(systemActive ? "Sistema actiu" : "Sistema apagat");
    delay(1000);
  }

  if (systemActive) {
    updateSensors();
    updateActivityLevel();
    calculateReminderInterval();
    if (millis() - lastReminder > reminderInterval) {
      triggerReminder();
      lastReminder = millis();
    }
    updateDisplay();
  }
}

// --- Implementacions de funcions ---

void updateSensors() {
  sensors_event_t humidityEvent, tempEvent;
  aht.getEvent(&humidityEvent, &tempEvent);
  temperature = tempEvent.temperature;
  humidity = humidityEvent.relative_humidity;
}

void updateActivityLevel() {
  int16_t ax, ay, az;
  mpu.getAcceleration(&ax, &ay, &az);
  int magnitude = abs(ax) + abs(ay) + abs(az);
  if (magnitude > 50000) activityLevel = "Alt";
  else if (magnitude > 20000) activityLevel = "Mitjà";
  else activityLevel = "Baix";
}

void calculateReminderInterval() {
  if (activityLevel == "Alt" || temperature > 30 || humidity < 30)
    reminderInterval = 15 * 60 * 1000;
  else if (activityLevel == "Mitjà")
    reminderInterval = 30 * 60 * 1000;
  else
    reminderInterval = 45 * 60 * 1000;
}

void triggerReminder() {
  digitalWrite(VIBRATOR_PIN, HIGH);
  delay(500);
  digitalWrite(VIBRATOR_PIN, LOW);
  Serial.println("Recordatori: Beu aigua!");
}

void updateDisplay() {
  display.clearDisplay();
  display.setCursor(0,0);
  display.print("Temp: "); display.print(temperature); display.println("C");
  display.print("Hum: "); display.print(humidity); display.println("%");
  display.print("Activitat: "); display.println(activityLevel);
  display.display();
}

void setupWebServer() {
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    String html = "<html><body><h2>Estat del sistema</h2>";
    html += "<p>Temperatura: " + String(temperature) + " C</p>";
    html += "<p>Humitat: " + String(humidity) + " %</p>";
    html += "<p>Nivell d'activitat: " + activityLevel + "</p>";
    html += "<p>Propera alerta en: " + String((reminderInterval - (millis() - lastReminder)) / 60000) + " min</p>";
    html += "</body></html>";
    request->send(200, "text/html", html);
  });
  server.begin();
}
